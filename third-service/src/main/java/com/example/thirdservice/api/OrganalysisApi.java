/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.thirdservice.api;

import com.example.firstservice.models.Error;
import com.example.firstservice.models.InlineResponse500;
import com.example.firstservice.models.InlineResponseDefault;
import com.example.firstservice.models.Coordinates;
import com.example.firstservice.models.OrganizationType;
import com.example.thirdservice.models.InlineResponse200;
import com.example.thirdservice.models.Prediction;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-09-22T22:04:54.480604900+03:00[Europe/Moscow]")
@Validated
public interface OrganalysisApi {

    @Operation(summary = "Predict organization annual turnover behavior", description = "Get prediction of Organization annual turnover behavior", tags={ "prediction" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Returns Annual Turnover prediction", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Prediction.class)))),
        
        @ApiResponse(responseCode = "400", description = "The request was bad composed", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponseDefault.class))) })
    @RequestMapping(value = "/organalysis/predict/organizations/{id}/annual-turnover",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Prediction>> predictOrganizationAnnualTurnoverBehavior(@Min(1)@Parameter(in = ParameterIn.PATH, description = "Organization id", required=true, schema=@Schema(allowableValues={ "1" }, minimum="1"
)) @PathVariable("id") Integer id);


    @Operation(summary = "Recommend coordinate quarter for organization", description = "Get recommended coordinate quarter", tags={ "recommendation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Returns recommended coordination quarter", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "400", description = "The request was bad composed", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponseDefault.class))) })
    @RequestMapping(value = "/organalysis/recommend/coordinates/quarter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> recommendCoordinateQuarter();


    @Operation(summary = "Recommend organizations by coordinates", description = "Get recommended organizations (customized amount) by coordinates and with/without Organization Type filter", tags={ "recommendation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Returns recommended Organizations", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Object.class)))),
        
        @ApiResponse(responseCode = "400", description = "The request was bad composed", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse500.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponseDefault.class))) })
    @RequestMapping(value = "/organalysis/recommend/organizations/coordinates",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Object>> recommendOrganizationsByCoordinates(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Start coordinates" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "coordinates", required = true) Coordinates coordinates, @Min(1L)@Parameter(in = ParameterIn.QUERY, description = "Amount of requested recommended Organizations" ,schema=@Schema(allowableValues={ "1" }, minimum="1"
, defaultValue="5")) @Valid @RequestParam(value = "amount", required = false, defaultValue="5") Long amount, @Parameter(in = ParameterIn.QUERY, description = "Organization type" ,schema=@Schema()) @Valid @RequestParam(value = "organizationType", required = false) OrganizationType organizationType);

}

