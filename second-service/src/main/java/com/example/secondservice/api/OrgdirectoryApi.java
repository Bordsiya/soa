/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.secondservice.api;

import com.example.firstservice.models.ErrorDTO;
import com.example.firstservice.models.OrganizationDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.Min;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-09-22T15:03:58.143327300+03:00[Europe/Moscow]")
@Validated
public interface OrgdirectoryApi {

    @Operation(summary = "Filter Organizations by turnover", description = "Get filtered Organizations by min and max turnovers", tags={ "filtration" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Returns filtered Organizations by annual turnover", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OrganizationDTO.class)))),
        
        @ApiResponse(responseCode = "400", description = "The request was bad composed", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))),

        @ApiResponse(responseCode = "500", description = "Internal Server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class)))})
    @RequestMapping(value = "/orgdirectory/filter/turnover/{min-annual-turnover}/{max-annual-turnover}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<OrganizationDTO>> filterOrganizationsByAnnualTurnover(@DecimalMin("0")@Parameter(in = ParameterIn.PATH, description = "Min annual turnover to filter", required=true, schema=@Schema()) @PathVariable("min-annual-turnover") Double minAnnualTurnover, @DecimalMin("0")@Parameter(in = ParameterIn.PATH, description = "Max annual turnover to filter", required=true, schema=@Schema()) @PathVariable("max-annual-turnover") Double maxAnnualTurnover);


    @Operation(summary = "Filter Organizations by employees count", description = "Get filtered Organizations by min and max employees count", tags={ "filtration" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Returns filtered Organizations by employees count", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Object.class)))),
        
        @ApiResponse(responseCode = "400", description = "The request was bad composed", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))),

        @ApiResponse(responseCode = "500", description = "Internal Server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class)))})
    @RequestMapping(value = "/orgdirectory/filter/employees/{min-employees-count}/{max-employees-count}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Object>> filterOrganizationsByEmployeesCount(@Min(0L)@Parameter(in = ParameterIn.PATH, description = "Min employees count to filter", required=true, schema=@Schema(allowableValues={ "0" }
)) @PathVariable("min-employees-count") Long minEmployeesCount, @Min(0L)@Parameter(in = ParameterIn.PATH, description = "Max employees count to filter", required=true, schema=@Schema(allowableValues={ "0" }
)) @PathVariable("max-employees-count") Long maxEmployeesCount);

}

